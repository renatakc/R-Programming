x = 1
2x
2*x
library(xlsx\)
library(xlsx)
install.packages("xlsx")
library*xlsx)
library(xlsx)
installed.packages(rJava)
installed.packages("rJava")
install.packages("rJava")
library(xlsx)
library(xlsx)
library(rJava)
q()
library(xlsx)
q()
library(rJava)
install.packages("rJava")
library(rJava)
loadNamespace("rJava")
loadNamespace("rJava")
library(rJava)
install.packages(igraph)
install.packages("igraph")
install.packages("igraphdata")
install.packages("statnet")
install.packages("intergraph")
install.packages("twitter")
install.packages("twitteR")
install.packages("RCurl")
require(twitteR)
require(RCurl)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key <- 'XzrKYjsswrEqD4HH0pWOLLxaE'
consumer_secret <- 'N6ZEyi5CZStiASpwHa7RWQfxPGEE22ntKwJKeGQ3ABqxb6OIam'
access_token <- '43606065-ZH0uf5jWIQ6F2dApoELNPSF33ARuSj7kPXmaQY2xi'
access_secret <- 'H4OoxCNWjJ5953jfftvdclMzsd1ZHKJnH4Ndfi20MMky1'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
data_tweets <- searchTwitter("data", n = 10, lang = "en")
data_tweets
data_tweets <- searchTwitter("renata", n = 5, lang = "en")
data_tweets
require(tm)
install.packages("tm")
install.packages("wordcloud")
require(tm)
require(wordcloud#)
require(wordcloud)
data_science <- searchTwitter("data+science", lang = "en", n = 50, resultType = "recent")
class(data_science)
data_sci_text <- sapply(data_science, function(x) x$getText())
str(data_sci_text)
data_sci_corpus <- Corpus(VectorSource(data_sci_text))
data_sci_text
data_sci_corpus
inspect(data_sci_corpus[1])
inspect(data_sci_corpus[3])
inspect(data_sci_text[3])
data_clean <- tm_map(data_sci_corpus, removePunctuation)
data_clean <- tm_map(data_sci_clean, content_transformer(tolower))
data_clean <- tm_map(data_clean, content_transformer(tolower))
data_clean <- tm_map(data_sci_corpus, removeWords, stopwords("english"))
data_clean <- tm_map(data_sci_corpus, removeNumbers)
data_clean <- tm_map(data_sci_corpus, stripWhitespace)
wordcloud(data_clean)
wordcloud(data_clean, random.order = F, max.words = 50, scale = c(3, 0.5), colors = rainbow(50))
data_science <- searchTwitter("data+science", lang = "en", n = 500, resultType = "recent")
data_sci_text <- sapply(data_science, function(x) x$getText())
str(data_sci_text)
data_sci_corpus <- Corpus(VectorSource(data_sci_text))
inspect(data_sci_corpus[3])
data_clean <- tm_map(data_sci_corpus, removePunctuation)
data_clean <- tm_map(data_clean, content_transformer(tolower))
data_clean <- tm_map(data_sci_corpus, removeWords, stopwords("english"))
data_clean <- tm_map(data_sci_corpus, removeNumbers)
data_clean <- tm_map(data_sci_corpus, stripWhitespace)
wordcloud(data_clean, random.order = F, max.words = 50, scale = c(3, 0.5), colors = rainbow(50))
wordcloud(data_clean, random.order = F, colors = rainbow(50))
data_clean <- tm_map(data_sci_corpus, removeWords, c("data", "science"))
wordcloud(data_clean, random.order = F, max.words = 200, colors = rainbow(50))
wordcloud(data_clean)
data_clean <- tm_map(data_sci_corpus, removePunctuation)
data_clean <- tm_map(data_clean, content_transformer(tolower))
data_clean <- tm_map(data_clean, removeWords, stopwords("english"))
data_clean <- tm_map(data_clean, removeNumbers)
data_clean <- tm_map(data_clean, stripWhitespace)
data_clean <- tm_map(data_clean, removeWords, c("data", "science"))
wordcloud(data_clean, random.order = F, max.words = 200, colors = rainbow(50))
warnings()
wordcloud(data_clean, random.order = F, max.words = 100, colors = rainbow(20))
wordcloud(data_clean, random.order = F, max.words = 50, colors = rainbow(blues9))
wordcloud(data_clean, random.order = F, max.words = 50, colors = rainbow(blue))
wordcloud(data_clean, random.order = F, max.words = 50)
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("swirl")
swirl()
library(swirl)
ls()
rm(list = ls)
rm(list = ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- line(children ~ parent, galton)
regrline <- lm(children ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = red)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
library(swirl)
remove(list = ls())
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = "red")
summary(regrline)
a[:2]
x <- 1:5
x
fix(x)
fix(galton)
install.packages("WideLM")
rm(list = ls())
data("AirPassengers")
anova(AirPassengers)
as.data.frame.table(AirPassengers)
as.data.frame(AirPassengers)
data("airquality")
View(airquality)
data_1 <- as.data.frame(airquality)
anova(data_1)
data_1 <- as.data.frame.table(airquality)
anova(data_1)
data_1 <- as.table(airquality)
anova()
data_1 <- as.data.frame(airquality)
data_2 <- lm(data_1, Ozone ~ Wind)
data_2 <- lm(data_1)
data_2 <- lm(data_1$Ozone~data_1$Wind)
anova(data_2)
data_3 <- anova(data_2)
View(data_3)
View(data_2)
data_2
Anova(data_2)
formula(data_2)
data("ChickWeight")
data("chickwts")
View(chickwts)
feeds <- table(chickwts$feed)
feeds
pie(feeds)
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,
clockwise = TRUE,
main = "Pie Chart of Feeds from chickwts")
rm(list = ls())
groups <- c(rep("blue", 39),
rep("red", 45),
rep("pink", 23),
rep("purple", 76),
rep("gray", 5))
groups.1 <- table(groups)
groups.2 <- sort(groups.1, decreasing = TRUE)
groups.2
prop.table(groups.2)
round(prop.table(groups.2),2)
round(prop.table(groups.2),2) * 100
install.packages("psych")
prop.test(56, 76)
x <- [10, 9.8, 8, 7.8, 7.7, 7, 6, 5, 4, 2]
y <- [200, 44, 32, 24, 22, 17, 15, 12, 8, 4]
x <- c(10, 9.8, 8, 7.8, 7.7, 7, 6, 5, 4, 2)
y <- c(200, 44, 32, 24, 22, 17, 15, 12, 8, 4)
x
y
Pearson <- cor(x, use = "everything", method = c("pearson", "spearman"))
Pearson <- cor(x, use = "everything", method = "pearson"))
Pearson <- cor(x, use = "all.obs", method = "pearson"))
Pearson <- cor(x, use = "all.obs", method = "pearson")
Pearson <- cor(x, y, use = "all.obs", method = "pearson")
Pearson
Spearman <- cor(x, y, use = "all.obs", method = "spearman")
Spearman
floor(Spearman, 2)
Spearman <- floor(cor(x, y, use = "all.obs", method = "spearman"))
Spearman
Spearman <- round((cor(x, y, use = "all.obs", method = "spearman"), digits = 3)
rm(list = ls())
x <- c(95,85,80,70,60)
y <- c(85,95,70,65,70)
lin_reg <- lm(x ~ y)
summary(lin_reg)
anova(lin_reg)
sqrt(lin_reg)
sqrt(x)
sqrt(x,y)
lsfit(x, y, intercept = TRUE)
lin_reg <- lm(y ~ x)
summary(lin_reg)
lin_reg$coefficients
lin_reg$coefficients[1]
x_fcst <- 80
y_80 <- lin_reg$coefficients[1] + (lin_reg$coefficients[2]*x_fcst)
y_80
round(y_80, digits = 3)
round(y_80, digits = 1)
max <- 9800
load <- 49
mean <- 205
st.dev <- 15
x <- rnorm(49, mean = mean, sd = st.dev)
x
hist(x, probability = TRUE)
x <- rnorm(max, mean = mean, sd = st.dev)
x
hist(x, probability = TRUE)
m_box <- max/load
m_box
sd_1 <- st.dev/(sqrt(load))
sd_q
sd_1
pnorm(max, mean = mean, sd = sd_1, lower.tail = TRUE)
pnorm(load, mean = mean, sd = sd_1, lower.tail = TRUE)
prob <- round(pnorm(load, mean = mean, sd = sd_1, lower.tail = TRUE), digits = 3)
prob
prob <- round(pnorm(load, mean = mean, sd = sd_1, lower.tail = FALSE), digits = 4)
prob
prob <- floor(pnorm(load, mean = mean, sd = sd_1, lower.tail = FALSE), digits = 4)
prob <- floor(pnorm(load, mean = mean, sd = sd_1, lower.tail = FALSE))
prob
prob <- pnorm(load, mean = mean, sd = sd_1, lower.tail = FALSE)
prob
max <- 250
load <- 100
mean <- 2.4
st.dev <- 2
m_box <- max/load
sd_1 <- st.dev/(sqrt(load))
sd_1
sd_1 <- round(st.dev/(sqrt(load)), digits = 4)
sd_1
rm(list = ())
rm(list = ls())
getwd()
rm(list = ls())
a <- seq(1:100)
a
x <- (-4*a-8)/3
x
x <- round((-4*a-8)/3, digits = 3)
x
x <- round((-4*a-8)/3, digits = 2)
cor.test(a, x, method = "Pearson")
cor.test(a, x, method = "pearson")
pearson <- cor.test(a, x, method = "pearson")
pearson$parameter
rm(list = ls())
3/4
4/3
x <- 3/4
y <- 4/3
x*y
floor(x*y)
round(x*y, digits = 2)
y*y
x*x
slope <- sqrt(y*y)
slope
sqrt(y)
y
1-(y*y)
0.4*(4/8)
0.4*(8/4)
(sqrt(0.4)*2)
(sqrt(0.4)*0.5)
rm(list = ls())
install.packages("ISLR")
library(tree)
install.packages("tree")
install.packages("BJSales")
data("BJSales")
library(dataset)
library(MASS)
rm(list = ls())
data("BJsales")
summary(BJsales)
head(BJsales)
View("BJsales")
View("BJsales")
BJsales
data(cars)
rm(list = ls())
data(mtcars)
View(mtcars)
?mtcars
source('~/.active-rstudio-document', echo=TRUE)
plot(clusters)
plot(clusters, hang = -1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(clusters)
plot(clusters, hang = -1)
rect.hclust(clusters, 6)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("sparcl")
library(sparcl)
ColorDendrogram(clusters, y = clusters.6, labels = names(clusters.6), branchlength = 5)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mtcars
source('C:/Users/Re/Desktop/manual_analysis.r', echo=TRUE)
mtcars[mtcars$cyl >= 6,]
mtcars[mtcars$cyl >= 6,]
mtcars[mtcars$cyl < 6,]
mtcars[mtcars$cyl >= 6 && mtcars$hp >= 100,]
mtcars[mtcars$cyl >= 6 & mtcars$hp >= 100,]
p1 <- mtcars[mtcars$cyl >= 6 & mtcars$hp >= 100,]
p2 <- mtcars[mtcars$cyl < 6 & mtcars$hp < 100,]
p3 <- mtcars[mtcars$cyl >= 6 & mtcars$hp >= 100,]
p4 <- mtcars[mtcars$cyl < 6 & mtcars$hp < 100,]
p1 <- mtcars[mtcars$cyl >= 6 & mtcars$hp >= 100,]
p2 <- mtcars[mtcars$cyl >= 6 & mtcars$hp < 100,]
p3 <- mtcars[mtcars$cyl < 6  & mtcars$hp >= 100,]
p4 <- mtcars[mtcars$cyl < 6  & mtcars$hp < 100,]
View(p2)
plot(p1)
c <- data.frame(profile = c(1,2,3,4), c(length(p1), length(p2), length(p3), length(p4)))
c
c <- data.frame(profile = c(1,2,3,4), length = c(length(p1), length(p2), length(p3), length(p4)))
c
plot(c)
c
c <- data.frame(profile = c(1,2,3,4), length = c(nrow(p1), nrow(p2), nrow(p3), nrow(p4)))
c
plot(c)
barplot(c)
barplot(c(nrow(p1), nrow(p2), nrow(p3), nrow(p4)))
lengths <- c(nrow(p1), nrow(p2), nrow(p3), nrow(p4))
c <- data.frame(profile = c(1,2,3,4), length = lenghts)
barplot(c(nrow(p1), nrow(p2), nrow(p3), nrow(p4)))
barplot(lengths)
pie(c)
barplot(c$lengths)
pie(c$length)
barplot(c$lengths)
barplot(C(c$lengths))
barplot(lengths)
barplot(table(c$profile, c$length))
barplot(table(c$length,c$profile))
barplot(c, main = "Cars", xlab = "Number")
c <- table(profile = c(1,2,3,4), length = lenghts)
lengths <- c(nrow(p1), nrow(p2), nrow(p3), nrow(p4))
c <- table(profile = c(1,2,3,4), length = lenghts)
lengths <- c(nrow(p1), nrow(p2), nrow(p3), nrow(p4))
c <- table(profile = c(1,2,3,4), length = lengths)
barplot(c, main = "Cars", xlab = "Number")
lengths <- c(nrow(p1), nrow(p2), nrow(p3), nrow(p4))
c <- data.frame(profile = c(1,2,3,4), length = lengths)
barplot(table(c$length), main = "Cars", xlab = "Number")
table(c$length)
table(c$length, c$profile)
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar",
filename="r-docs/simple-bar"
)
p
library(plotly)
p <- plot_ly(
x = c$profile,
y = c$length,
name = "SF Zoo",
type = "bar",
filename="r-docs/simple-bar"
)
p
source('C:/Users/Re/Desktop/manual_analysis.r', echo=TRUE)
source('C:/Users/Re/Desktop/manual_analysis.r', echo=TRUE)
source('C:/Users/Re/Desktop/manual_analysis.r', echo=TRUE)
source('C:/Users/Re/Desktop/manual_analysis.r', echo=TRUE)
c <- order(c)
c
c <- order(c, decreasing = TRUE)
c
swirl()
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
(3+4+5+6+5+4+3+1)/36
(3+4+5+6+5+4+3+1)/31
(3+4+6+6+6+4+4+1)/36
(3+4+6+6+6+4+4+1+1)/36
info()
(3+4+5+6+5+4+3+1+1+1)/36
deck
1/52
52
1/52
4/52
0
12/52
11/204
2/51
1.28
0.64
0.64
library(swirl)
swirl()
swirl()
swirl()
swirl()
0.64
64%
0.64
mypdf
integrate(mypdf)
integrate(mypdf, lower = 0, upper = 1.6)
(x^2)/8
0.25
2
sqrt(2)
P(+D)*P(D)
99.7
.001*99.7
.001*.997
0.999*0.015
0.001*.997/((.001*.997)+(.999*.015))
1/6
1
(1+2+3+4+5+6)/6
expect_dice()
expect_dice(2)
expect_dice(pmf = 2)
expect_dice(pmf)
expect_dice(PMF)
expect_dice(pmf = c(1/1,1/2,1/3,1/4,1/5,1/6))
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
E((edh+edl)/2)
(edh+edl)/2
library(swirl)
swirl()
integrate(myfunc, lower = 0, upper = 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
library(swirl)
swirl()
setwd("C:/Users/Re/Documents/R/R Workshop/data-table-training-master")
install.packages("data.table")
library(data.table)
moviedata <- fread("MOVIE.DATA.csv", header = TRUE)
moviedata <- read.csv("MOVIE.DATA.csv", header = TRUE)
moviedata <- fread("MOVIEDATA.csv", header = TRUE)
head(moviedata)
str(moviedata)
moviedata[GENRE == "Action"]
moviedata[GENRE == "Action", sum(OVERALL)]
moviedata[GENRE %in% list("Action","Adventure","Romance")]
moviedata[, lapply(.SD, mean), by= GENRE]
data.table.optimize = 1
moviedata[, lapply(.SD, mean), by= GENRE]
flights <- data.table(flights, header = TRUE)
flights <- fread("flights14.csv", header = TRUE)
View(flights)
flights[carrier == "UA"]
ua_count <- flights[carrier == "UA", count(OVERALL)]
a <- flights[, sum(OVERALL), by = .(carrier)]
a <- flights[, sum(carrier), by = .(carrier)]
a <- flights[, .N, by = carrier]
View(a)
a <- flights[, .A, by = carrier]
flights[, sum(OVERALL), by= carrier]
flights[carrier = "UA", mean(OVERALL)]
number_per_carrier <- flights[, .N, by = carrier]
flights[,.(Delays = mean(dep.delay)), by = .(Carrier = sign(carrier))]
flights[,.(Delays = mean(dep.delay)), by = .(Carrier = sign(carrier-1))]
flights[],.(dep_delay = sum(dep_delay)),by=carrier]
flights[,.(dep_delay = sum(dep_delay)),by=carrier]
flights[,.(dep_delay = mean(dep_delay)),by=carrier]
avg_delay <- flights[,.(Delays = round(mean(V4),2),by = carrier]
avg_delay <- flights[,.(Delays = round(dep_delay(V4),2),by = carrier]
avg_delay <- flights[,.(Delays = round(dep_delay(V4),2),by = carrier]
avg_delay <- flights[,.(Delays = mean(dep_delay),by = carrier]
avg_delay <- flights[,.(Delays = mean(dep_delay)),by = carrier]
keys <- setkey(flights, year, dep_time, tailnum)
